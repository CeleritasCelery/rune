* Elprop
The Emacs lisp property tester.

Even though we have a suite of tests inside Rune, the best test of correctness is "whatever Emacs does". That is exactly what this utility is for. Elprop will call functions from both Emacs and Rune to compare the results. This makes it much easier to find differences in behavior.

** Running
To run elprop, call ~elprop/elprop~ with a regex matching the name of some rune lisp functions (functions marked with ~#[defun]~). This will then compare the results of running those functions with directed input in both Emacs and rune and report any mismatches.

** Architecture
Elprop is made up of multiple parts that can seem confusing at first glance. On the top we have a shell script to make sure we are never running on old code. Then we have the top-level elprop binary which parses the Rust source code and extracts all the functions. Emacs can't read input from stdin, or send data to stdout (except for batch error messages), but it can connect to stdin/stout of its own subprocesses. So we can't just call Emacs and Rune together to test them. Instead we create a middleware binary called runner.rs. This is called as a subprocess of Emacs and can send data to both Emacs and Rune and compare the results. When it is done, we write out a JSON of the results which gets read by elprop.rs and the program terminates.

[[file:../media/elprop_arch.png]]
